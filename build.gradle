/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.6/userguide/java_library_plugin.html
 */

plugins {
    id 'maven'
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'org.ajoberstar.git-publish' version '2.1.1'
    id "com.eden.orchidPlugin" version '0.17.0'
}

apply from: './jacoco.gradle'

group "com.bbva.ndb"
version = '1.0.0-alpha.49'

def lombokVersion = '1.18.4'

dependencies {

    implementation 'org.web3j:core:3.3.1-android'

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:25.0-android'

    api 'com.google.code.gson:gson:2.8.4'

    api 'com.squareup.okhttp3:okhttp:3.10.0'

    // implementation 'com.typesafe:config:1.3.2'
    implementation 'com.github.bmoliveira:snake-yaml:v1.18-android'

    compileOnly("org.projectlombok:lombok:${lombokVersion}")
    testCompileOnly("org.projectlombok:lombok:${lombokVersion}")
    annotationProcessor("org.projectlombok:lombok:${lombokVersion}")
    testAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'

    // required if you want to use Mockito for unit tests
    testCompile 'org.mockito:mockito-core:2.24.0'
    testCompile 'org.powermock:powermock-api-mockito2:2.0.0'
    testCompile 'org.powermock:powermock-module-junit4:2.0.0'
    testCompile 'org.powermock:powermock-core:2.0.0'
    testCompile 'org.powermock:powermock-module-junit4-rule:2.0.0'

    implementation "org.java-websocket:Java-WebSocket:1.3.9"

//    orchidRuntime 'io.github.javaeden.orchid:OrchidAll:0.17.0'
    orchidCompile "io.github.javaeden.orchid:OrchidCore:0.17.0"
    orchidCompile "io.github.javaeden.orchid:OrchidBsDoc:0.17.0"
    orchidCompile "io.github.javaeden.orchid:OrchidPages:0.17.0"
}

task javadocJar(type: Jar) {
    from javadoc
    classifier = 'javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives javadocJar, sourcesJar
}

gitPublish {
    repoUri = 'git@github.com:BBVA/hancock-sdk-java-android.git'
    // where to fetch from prior to fetching from the remote (i.e. a local repo to save time)
//    referenceRepoUri = 'file:///home/human/projects/test-repo/'

    branch = 'gh-pages'

    // generally, you don't need to touch this
//    repoDir = file("$buildDir/somewhereelse") // defaults to $buildDir/gitPublish

    // what to publish, this is a standard CopySpec
    contents {
        from "$buildDir/docs/orchid"
        from(javadoc) {
            into 'api'
        }
    }

    commitMessage = 'Publishing docs' // defaults to 'Generated by gradle-git-publish'
}

orchid {
    // Theme is required
    theme   = "BsDoc"

    // The following properties are optional
    version = "${project.version}"
    baseUrl = "https://bbva.github.io/hancock-sdk-java-android/"   // a baseUrl prepended to all generated links. Defaults to '/'
    srcDir  = "docs"                    // defaults to 'src/orchid/resources'
    runTask = "build"                   // specify a task to run with 'gradle orchidRun'
}

clean {
    delete 'tests'
    delete 'build'
    delete 'out'
}

repositories {
    jcenter()
    maven { url 'https://jitpack.io' }
    mavenCentral()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "s3://microservices-java-repository/maven/release"
            authentication {
                awsIm(AwsImAuthentication)
            }
        }
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name = 'Hancock SDK Java Android'
                description = 'Hancock users can make use of Hancock SDKs to orchestrate the requests and events to and from Hancock components required to perform application level operations.'
                packaging = 'jar'
                url = 'https://github.com/BBVA/hancock-sdk-java-android'

                scm {
                    connection = 'scm:git:ssh://git@github.com:BBVA/hancock-sdk-java-android.git'
                    developerConnection = 'scm:git:ssh://git@github.com:BBVA/hancock-sdk-java-android.git'
                    url = 'https://github.com/BBVA/hancock-sdk-java-android'
                }

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'hancock-group'
                        name = 'BBVA NDB - R&D'
                        email = 'bbva-ndb-hancock.group@bbva.com'
                    }
                }
            }
        }
    }
}

jar {
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version)
    }
}

signing {
    sign configurations.archives
//    sign publishing.publications.external
}

