package com.bbva.hancock.sdk;

import org.web3j.crypto.Credentials;
import org.web3j.crypto.RawTransaction;
import org.web3j.crypto.TransactionEncoder;
import org.web3j.crypto.WalletUtils;
import org.web3j.utils.Numeric;

import java.io.File;
import java.math.BigInteger;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class HancockEthereumClient {

    public EthereumWallet generateWallet() throws Exception {

        try {

            String pass = "__123456__";

            File tmpDirectory = new File("/tmp/wallets");
            tmpDirectory.mkdirs();

            String fileName = WalletUtils.generateNewWalletFile(pass, tmpDirectory, false);
            Credentials credentials = WalletUtils.loadCredentials(pass, tmpDirectory + "/" + fileName);

            String address = credentials.getAddress();
            String privateKey = "0x" + credentials.getEcKeyPair().getPrivateKey().toString(16);
            String publicKey = "0x" + credentials.getEcKeyPair().getPublicKey().toString(16);

            return new EthereumWallet(address, privateKey, publicKey);

        } catch (Exception error) {

            System.out.println("error: " + error.toString());
            throw new Exception("Error generating wallet");

        }

    }

    public RawTransaction createRawTransaction(BigInteger nonce, BigInteger gasPrice, BigInteger gasLimit, String to,
                                       BigInteger value) {
        return RawTransaction.createEtherTransaction(nonce, gasPrice, gasLimit, to, value);
    }

    public String signTransaction(RawTransaction rawTransaction, String privateKey) {

        Credentials credentials = Credentials.create(privateKey);
        byte[] signedMessage = TransactionEncoder.signMessage(rawTransaction, credentials);
        String hexValue = Numeric.toHexString(signedMessage);

        return hexValue;
    }

}