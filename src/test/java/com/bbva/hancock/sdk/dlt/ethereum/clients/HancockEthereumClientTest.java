package com.bbva.hancock.sdk.dlt.ethereum.clients;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import com.bbva.hancock.sdk.config.HancockConfig;
import com.bbva.hancock.sdk.config.HancockConfigNode;
import com.bbva.hancock.sdk.config.HancockConfigService;
import com.bbva.hancock.sdk.dlt.ethereum.EthereumRawTransaction;
import com.bbva.hancock.sdk.dlt.ethereum.EthereumWallet;
import com.bbva.hancock.sdk.dlt.ethereum.models.util.ValidateParameters;
import com.bbva.hancock.sdk.dlt.ethereum.models.wallet.GetBalanceResponse;

import org.junit.BeforeClass;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PowerMockIgnore;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;
import org.web3j.crypto.Credentials;
import org.web3j.crypto.RawTransaction;
import org.web3j.crypto.TransactionEncoder;
import org.web3j.protocol.Web3jFactory;

import okhttp3.Call;
import okhttp3.OkHttpClient;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

@PowerMockIgnore("javax.net.ssl.*")
//@RunWith(MockitoJUnitRunner.class)
@RunWith(PowerMockRunner.class)
@PrepareForTest({TransactionEncoder.class,Credentials.class,EthereumRawTransaction.class,RawTransaction.class,Web3jFactory.class,
        OkHttpClient.class,Call.class,okhttp3.Response.class,okhttp3.Request.class,GetBalanceResponse.class,HancockConfig.class, ValidateParameters.class})
public class HancockEthereumClientTest {

    public static HancockConfig mockedConfig;
    public static EthereumWallet mockedWallet;
    public static HancockEthereumTransferClient mockedHancockEthereumClient;
    public static HancockEthereumTransactionClient mockedHancockEthereumClientTransaction;

    @BeforeClass
    public static void setUp() throws Exception{

        mockedConfig = new HancockConfig.Builder()
                .withEnv("custom")
                .withNode("http://mock.node.com", 9999)
                .withAdapter("http://mock.adapter.com", "/base", 9999)
                .build();

        mockedHancockEthereumClientTransaction = new HancockEthereumTransactionClient(mockedConfig);
        mockedHancockEthereumClient = new HancockEthereumTransferClient(mockedConfig, mockedHancockEthereumClientTransaction);
        mockedWallet = new EthereumWallet("0xmockAddress","mockPrivateKey","mockPublicKey");

    }

    @Test public void testDumb()  {

        String test = "TEST";
        assertEquals(test, "TEST");

    }

    @Test public void testConfig() throws Exception {
        HancockConfig.Builder builder = new HancockConfig.Builder();
        //builder.withAdapter("host", "base", 80);
        HancockConfig.Builder spy_var = PowerMockito.spy(builder);
        PowerMockito.doReturn(mockedConfig).when(spy_var).build();
        HancockConfig result = spy_var.build();
        System.out.println("config  "+result.getEnv());
        assertTrue("Config OK", result instanceof HancockConfig);
    }

    @Test public void testConfigInstantiation() throws Exception {


        assertEquals(mockedConfig.getEnv(), "custom");

        HancockConfigNode node = mockedConfig.getNode();
        assertEquals(node.getHost(), "http://mock.node.com");
        assertEquals(node.getPort(), 9999);

        HancockConfigService adapter = mockedConfig.getAdapter();
        assertEquals(adapter.getHost(), "http://mock.adapter.com");
        assertEquals(adapter.getBase(), "/base");
        assertEquals(adapter.getPort(), 9999);
        assertEquals(adapter.getResources().get("balance"), "/ethereum/balance/__ADDRESS__");

    }

}
