package com.bbva.hancock.sdk.dlt.ethereum.clients;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import com.bbva.hancock.sdk.Common;
import com.bbva.hancock.sdk.config.HancockConfig;
import com.bbva.hancock.sdk.dlt.ethereum.EthereumWallet;
import com.bbva.hancock.sdk.dlt.ethereum.models.EthereumTransaction;
import com.bbva.hancock.sdk.dlt.ethereum.models.EthereumTransactionAdaptResponse;
import com.bbva.hancock.sdk.dlt.ethereum.models.HancockGenericResponse;
import com.bbva.hancock.sdk.dlt.ethereum.models.smartContracts.EthereumCallResponse;
import com.bbva.hancock.sdk.dlt.ethereum.models.transaction.EthereumTransactionResponse;
import com.bbva.hancock.sdk.dlt.ethereum.models.transaction.TransactionConfig;
import com.bbva.hancock.sdk.dlt.ethereum.models.util.ValidateParameters;
import com.bbva.hancock.sdk.exception.HancockException;
import okhttp3.RequestBody;
import org.junit.BeforeClass;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PowerMockIgnore;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;
import org.web3j.protocol.core.methods.response.AbiDefinition;

import java.util.ArrayList;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.any;
import static org.mockito.Mockito.eq;
import static org.powermock.api.mockito.PowerMockito.mock;
import static org.powermock.api.mockito.PowerMockito.mockStatic;


@PowerMockIgnore("javax.net.ssl.*")
//@RunWith(MockitoJUnitRunner.class)
@RunWith(PowerMockRunner.class)
public class EthereumSmartContractClientTest {

    public static HancockConfig mockedConfig;
    public static TransactionConfig mockedTransactionConfig;
    public static EthereumWallet mockedWallet;
    public static EthereumSmartContractClient mockedHancockEthereumClient;
    public static EthereumTransactionClient spy_transaction_client;
    public static EthereumSmartContractClient spy_var;
    public static EthereumTransactionAdaptResponse mockedEthereumAdaptInvoke;
    public static EthereumTransaction mockedEthereumTransaction;
    public static EthereumTransactionResponse mockedEthereumTransactionResponse;

    public static String from;
    public static String to;
    public static String method;
    public static String data;
    public static String addressOrAlias;
    public static ArrayList<String> params;

    @BeforeClass
    public static void setUp() throws Exception{

        mockedConfig = new HancockConfig.Builder()
                .withEnv("custom")
                .withNode("http://mock.node.com", 9999)
                .withAdapter("http://mock.adapter.com", "/base", 9999)
                .build();

        mockedTransactionConfig = new TransactionConfig.Builder()
                .withPrivateKey("0x6c47653f66ac9b733f3b8bf09ed3d300520b4d9c78711ba90162744f5906b1f8")
                .build();

        EthereumTransactionClient transactionClient = new EthereumTransactionClient(mockedConfig);
        spy_transaction_client = PowerMockito.spy(transactionClient);
        mockedHancockEthereumClient = new EthereumSmartContractClient(mockedConfig, spy_transaction_client);
        spy_var = PowerMockito.spy(mockedHancockEthereumClient);

        mockedWallet = new EthereumWallet("0xmockAddress","mockPrivateKey","mockPublicKey");

        String nonce = String.valueOf(1);
        String gasPrice = String.valueOf(111);
        String gasLimit = String.valueOf(222);
        String value = String.valueOf(333);
        from = mockedWallet.getAddress();
        to = mockedWallet.getAddress();
        method = "mockedMethod";
        addressOrAlias = "mockedAlias";
        params = new ArrayList<>();
        params.add("mockedFirtsParam");
        data = "mockedData";

        mockedEthereumTransaction = new EthereumTransaction(from, to, value, data, nonce, gasLimit, gasPrice);
        mockedEthereumAdaptInvoke = new EthereumTransactionAdaptResponse(mockedEthereumTransaction, new HancockGenericResponse(1, "mockedOK"));
        mockedEthereumTransactionResponse = new EthereumTransactionResponse(true);

    }

    @PrepareForTest({ValidateParameters.class, Common.class})
    @Test public void testInvoke() throws Exception {

        PowerMockito.mockStatic(ValidateParameters.class);
        PowerMockito.doNothing().when(ValidateParameters.class, "checkAddress", any(String.class));
        PowerMockito.doNothing().when(ValidateParameters.class, "checkForContent", any(String.class) , any(String.class));

        PowerMockito.doReturn(mockedEthereumAdaptInvoke)
                .when(spy_var)
                .adaptInvoke(any(String.class), any(String.class), any(ArrayList.class), any(String.class));

        PowerMockito.doReturn(mockedEthereumTransactionResponse)
                .when(spy_transaction_client)
                .send(any(EthereumTransaction.class), any(TransactionConfig.class));

        EthereumTransactionResponse response = spy_var.invoke(addressOrAlias, method, params, from, mockedTransactionConfig);
        assertTrue("Response is of type TransactionResponse", response instanceof EthereumTransactionResponse);
        assertEquals(response.getSuccess(), true);

    }

    @PrepareForTest({ValidateParameters.class, Common.class})
    @Test public void testInvoke2() throws Exception {

        TransactionConfig mockedConfig = new TransactionConfig.Builder()
                .withProvider("mockProvider")
                .build();

        PowerMockito.mockStatic(ValidateParameters.class);
        PowerMockito.doNothing().when(ValidateParameters.class, "checkAddress", any(String.class));
        PowerMockito.doNothing().when(ValidateParameters.class, "checkForContent", any(String.class) , any(String.class));

        PowerMockito.doReturn(mockedEthereumAdaptInvoke)
                .when(spy_var)
                .adaptInvoke(any(String.class), any(String.class), any(ArrayList.class), any(String.class));

        PowerMockito.doReturn(mockedEthereumTransactionResponse)
                .when(spy_transaction_client)
                .send(any(EthereumTransaction.class), any(TransactionConfig.class));

        EthereumTransactionResponse response = spy_var.invoke(addressOrAlias, method, params, from, mockedConfig);
        assertTrue("Response is of type TransactionResponse", response instanceof EthereumTransactionResponse);
        assertEquals(response.getSuccess(), true);

    }

    @PrepareForTest({ValidateParameters.class, Common.class})
    @Test public void testInvoke3() throws Exception {

        TransactionConfig mockedConfig = new TransactionConfig.Builder()
                .withPrivateKey("0x6c47653f66ac9b733f3b8bf09ed3d300520b4d9c78711ba90162744f5906b1f8")
                .withProvider("mockProvider")
                .build();

        PowerMockito.mockStatic(ValidateParameters.class);
        PowerMockito.doNothing().when(ValidateParameters.class, "checkAddress", any(String.class));
        PowerMockito.doNothing().when(ValidateParameters.class, "checkForContent", any(String.class) , any(String.class));

        PowerMockito.doReturn(mockedEthereumAdaptInvoke)
                .when(spy_var)
                .adaptInvoke(any(String.class), any(String.class), any(ArrayList.class), any(String.class));

        PowerMockito.doReturn(mockedEthereumTransactionResponse)
                .when(spy_transaction_client)
                .send(any(EthereumTransaction.class), any(TransactionConfig.class));

        EthereumTransactionResponse response = spy_var.invoke(addressOrAlias, method, params, from, mockedConfig);
        assertTrue("Response is of type TransactionResponse", response instanceof EthereumTransactionResponse);
        assertEquals(response.getSuccess(), true);

    }

    @PrepareForTest({ValidateParameters.class, Common.class})
    @Test(expected = HancockException.class)
    public void testInvokeException() throws Exception {

        TransactionConfig mockedConfig = new TransactionConfig();
        EthereumTransactionResponse response = spy_var.invoke(addressOrAlias, method, params, from, mockedConfig);

    }

    @PrepareForTest({ValidateParameters.class, Common.class})
    @Test public void testCall() throws Exception {

        PowerMockito.mockStatic(ValidateParameters.class);
        PowerMockito.doNothing().when(ValidateParameters.class, "checkForContent", any(String.class) , any(String.class));
        PowerMockito.doNothing().when(ValidateParameters.class, "checkAddress", any(String.class));

        okhttp3.Request requestMock = mock(okhttp3.Request.class);
        okhttp3.Response responseMock = mock(okhttp3.Response.class);
        EthereumCallResponse responseModelMock = new EthereumCallResponse("mockedCall", new HancockGenericResponse(1,"mockedOk"));;

        mockStatic(Common.class);
        PowerMockito.when(Common.class, "getRequest", any(String.class), any(RequestBody.class))
                .thenReturn(requestMock);

        PowerMockito.when(Common.class, "makeCall", any(okhttp3.Request.class))
                .thenReturn(responseMock);

        PowerMockito.when(Common.class, "checkStatus", any(okhttp3.Response.class), eq(EthereumCallResponse.class))
                .thenReturn(responseModelMock);

        EthereumCallResponse response = spy_var.call(addressOrAlias, method, params, from);
        assertTrue("Response is of type CallResponse", response instanceof EthereumCallResponse);
        assertEquals(response.getData(), "mockedCall");
        assertEquals(response.getResult().getDescription(), "mockedOk");
    }

    @PrepareForTest({ValidateParameters.class, Common.class})
    @Test public void testRegister() throws Exception {

        PowerMockito.mockStatic(ValidateParameters.class);
        PowerMockito.doNothing().when(ValidateParameters.class, "checkForContent", any(String.class) , any(String.class));
        PowerMockito.doNothing().when(ValidateParameters.class, "checkAddress", any(String.class));

        okhttp3.Request requestMock = mock(okhttp3.Request.class);
        okhttp3.Response responseMock = mock(okhttp3.Response.class);
        HancockGenericResponse responseModelMock = new HancockGenericResponse(1,"mockedOk");

        mockStatic(Common.class);
        PowerMockito.when(Common.class, "getRequest", any(String.class), any(RequestBody.class))
                .thenReturn(requestMock);

        PowerMockito.when(Common.class, "makeCall", any(okhttp3.Request.class))
                .thenReturn(responseMock);

        PowerMockito.when(Common.class, "checkStatus", any(okhttp3.Response.class), eq(HancockGenericResponse.class))
                .thenReturn(responseModelMock);

        HancockGenericResponse response = spy_var.register(addressOrAlias, to, new ArrayList<AbiDefinition>());
        assertTrue("Response is of type HancockGenericResponse", response instanceof HancockGenericResponse);
        assertEquals(response.getDescription(), "mockedOk");

    }

    @PrepareForTest({ValidateParameters.class, Common.class})
    @Test public void testAdaptInvoke() throws Exception {

        okhttp3.Request requestMock = mock(okhttp3.Request.class);
        okhttp3.Response responseMock = mock(okhttp3.Response.class);
        EthereumTransactionAdaptResponse responseModelMock = new EthereumTransactionAdaptResponse(mockedEthereumTransaction, new HancockGenericResponse(1,"mockedOk"));

        mockStatic(Common.class);
        PowerMockito.when(Common.class, "getRequest", any(String.class), any(RequestBody.class))
                .thenReturn(requestMock);

        PowerMockito.when(Common.class, "makeCall", any(okhttp3.Request.class))
                .thenReturn(responseMock);

        PowerMockito.when(Common.class, "checkStatus", any(okhttp3.Response.class), eq(EthereumTransactionAdaptResponse.class))
                .thenReturn(responseModelMock);

        EthereumTransactionAdaptResponse response = spy_var.adaptInvoke(addressOrAlias, method, params, from);
        assertTrue("Response is of type EthereumTransactionAdaptResponse", response instanceof EthereumTransactionAdaptResponse);
        assertEquals(response.getData().getFrom(), from);
        assertEquals(response.getData().getTo(), to);
        assertEquals(response.getData().getData(), data);

    }

}
