package com.bbva.hancock.sdk.dlt.ethereum.services;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import com.bbva.hancock.sdk.Common;
import com.bbva.hancock.sdk.config.HancockConfig;
import com.bbva.hancock.sdk.dlt.ethereum.models.EthereumWallet;
import com.bbva.hancock.sdk.util.ValidateParameters;
import com.bbva.hancock.sdk.dlt.ethereum.models.wallet.GetBalanceResponse;
import org.junit.BeforeClass;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PowerMockIgnore;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

import java.math.BigInteger;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.mockito.Mockito.*;
import static org.powermock.api.mockito.PowerMockito.mock;
import static org.powermock.api.mockito.PowerMockito.*;
import static org.powermock.api.mockito.PowerMockito.when;

@PowerMockIgnore("javax.net.ssl.*")
@RunWith(PowerMockRunner.class)
public class EthereumWalletServiceTest {

  public static HancockConfig mockedConfig;
  public static EthereumWallet mockedWallet;
  public static EthereumWalletService mockedHancockEthereumClient;

  @BeforeClass
  public static void setUp() throws Exception {

    mockedConfig = new HancockConfig.Builder()
        .withEnv("custom")
        .withNode("http://mock.node.com", 9999)
        .withAdapter("http://mock.adapter.com", "/base", 9999)
        .build();

    EthereumWalletService hancockEthereumClient = new EthereumWalletService(mockedConfig);

    mockedHancockEthereumClient = PowerMockito.spy(hancockEthereumClient);
  }

//  @PrepareForTest({Credentials.class, org.web3j.crypto.Keys.class})
//  @Test
//  public void testGenerateWallet() throws Exception {
//
//    ECKeyPair mockECKeyPair = mock(ECKeyPair.class);
//    PowerMockito.when(mockECKeyPair.getPrivateKey()).thenReturn(new BigInteger("0"));
//    PowerMockito.when(mockECKeyPair.getPublicKey()).thenReturn(new BigInteger("1"));
//
//    mockStatic(Keys.class);
//    PowerMockito.when(Keys.class, "createEcKeyPair").thenReturn(mockECKeyPair);
//
//    Credentials mockCredentials = mock(Credentials.class);
//    mockStatic(Credentials.class);
//    PowerMockito.when(Credentials.class, "create", mockECKeyPair).thenReturn(mockCredentials);
//
//    PowerMockito.when(mockCredentials.getAddress()).thenReturn("mockedAddress");
//
//    PowerMockito.when(mockCredentials.getEcKeyPair()).thenReturn(mockECKeyPair);
//
//    mockedWallet = mockedHancockEthereumClient.generateWallet();
//
//    assertNotNull("Wallet should have an address", mockedWallet.getAddress());
//    assertNotNull("Wallet should have a publicKey", mockedWallet.getPublicKey());
//    assertNotNull("Wallet should have a privateKey", mockedWallet.getPrivateKey());
//
//    assertEquals(mockedWallet.getAddress(), "mockedAddress");
//    assertEquals(mockedWallet.getPrivateKey(), "0x0");
//    assertEquals(mockedWallet.getPublicKey(), "0x1");
//
//  }

  @PrepareForTest({ValidateParameters.class, Common.class})
  @Test
  public void testGetBalance() throws Exception {

    mockStatic(ValidateParameters.class);
    PowerMockito.doNothing().when(ValidateParameters.class, "checkAddress", any(String.class));
    PowerMockito.doNothing().when(ValidateParameters.class, "checkForContent", any(String.class), any(String.class));

    GetBalanceResponse responseModel = mock(GetBalanceResponse.class);
    when(responseModel.getBalance()).thenReturn("0");
    okhttp3.Response responseMock = mock(okhttp3.Response.class);
    okhttp3.Request requestMock = mock(okhttp3.Request.class);

//        EthereumWalletService spy_var = PowerMockito.spy(mockedHancockEthereumClient);

    mockStatic(Common.class);
    PowerMockito.when(Common.class, "getRequest", any(String.class)).thenReturn(requestMock);
    PowerMockito.when(Common.class, "makeCall", any(okhttp3.Request.class)).thenReturn(responseMock);
    PowerMockito.when(Common.class, "checkStatus", any(okhttp3.Response.class), eq(GetBalanceResponse.class)).thenReturn(responseModel);

    BigInteger balance = mockedHancockEthereumClient.getBalance("mockAddress");

    assertNotNull("Wallet should have a Balance", balance);
    assertEquals(balance, BigInteger.valueOf(0));

  }

}
